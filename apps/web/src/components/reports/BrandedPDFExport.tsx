'use client';

import React, { useState } from 'react';
import Image from 'next/image';
import { Download, Upload, Settings, Loader2, Image as ImageIcon } from 'lucide-react';
import { Button } from '@siteproof/design-system';
import { toast } from 'sonner';
import jsPDF from 'jspdf';

interface BrandingSettings {
  companyName: string;
  logoUrl: string;
  primaryColor: string;
  secondaryColor: string;
  footerText: string;
  includeWatermark: boolean;
  includePageNumbers: boolean;
  includeGeneratedDate: boolean;
}

interface BrandedPDFExportProps {
  reportType: 'itp' | 'ncr' | 'inspection' | 'daily_diary' | 'project_summary';
  reportData: any;
  reportId: string;
  organizationId: string;
}

export function BrandedPDFExport({
  reportType,
  reportData,
  reportId,
  organizationId,
}: BrandedPDFExportProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [showBrandingSettings, setShowBrandingSettings] = useState(false);
  const [brandingSettings, setBrandingSettings] = useState<BrandingSettings>({
    companyName: '',
    logoUrl: '',
    primaryColor: '#2563eb',
    secondaryColor: '#64748b',
    footerText: 'Generated by SiteProof',
    includeWatermark: false,
    includePageNumbers: true,
    includeGeneratedDate: true,
  });

  // Load branding settings
  React.useEffect(() => {
    loadBrandingSettings();
  }, [organizationId]);

  const loadBrandingSettings = async () => {
    try {
      const response = await fetch(`/api/organizations/${organizationId}/branding`);
      if (response.ok) {
        const data = await response.json();
        setBrandingSettings((prev) => ({
          ...prev,
          ...data,
        }));
      }
    } catch (error) {
      console.error('Failed to load branding settings:', error);
    }
  };

  const saveBrandingSettings = async () => {
    try {
      const response = await fetch(`/api/organizations/${organizationId}/branding`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(brandingSettings),
      });

      if (response.ok) {
        toast.success('Branding settings saved');
        setShowBrandingSettings(false);
      } else {
        throw new Error('Failed to save branding settings');
      }
    } catch (error) {
      console.error('Failed to save branding settings:', error);
      toast.error('Failed to save branding settings');
    }
  };

  const handleLogoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('logo', file);
    formData.append('organizationId', organizationId);

    try {
      const response = await fetch('/api/organizations/upload-logo', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const { logoUrl } = await response.json();
        setBrandingSettings((prev) => ({ ...prev, logoUrl }));
        toast.success('Logo uploaded successfully');
      } else {
        throw new Error('Failed to upload logo');
      }
    } catch (error) {
      console.error('Failed to upload logo:', error);
      toast.error('Failed to upload logo');
    }
  };

  const generateBrandedPDF = async () => {
    setIsGenerating(true);

    try {
      // Create PDF document
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      });

      // Set document properties
      pdf.setProperties({
        title: getReportTitle(),
        subject: `${reportType.toUpperCase()} Report`,
        author: brandingSettings.companyName || 'SiteProof',
        keywords: `${reportType}, construction, inspection`,
        creator: 'SiteProof',
      });

      // Add branding elements
      await addBrandingToPDF(pdf);

      // Add report content
      await addReportContent(pdf);

      // Add footer
      addFooter(pdf);

      // Save the PDF
      const fileName = `${reportType}_${reportId}_${Date.now()}.pdf`;
      pdf.save(fileName);

      // Log export
      await fetch('/api/reports/export-log', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          reportId,
          reportType,
          format: 'pdf',
          branded: true,
          organizationId,
        }),
      });

      toast.success('PDF generated successfully');
    } catch (error) {
      console.error('Failed to generate PDF:', error);
      toast.error('Failed to generate PDF');
    } finally {
      setIsGenerating(false);
    }
  };

  const addBrandingToPDF = async (pdf: jsPDF) => {
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    // Add logo
    if (brandingSettings.logoUrl) {
      try {
        const img = new Image();
        img.src = brandingSettings.logoUrl;
        await new Promise((resolve) => {
          img.onload = resolve;
        });

        // Add logo to top-left corner
        pdf.addImage(img, 'PNG', 10, 10, 40, 20);
      } catch (error) {
        console.error('Failed to add logo:', error);
      }
    }

    // Add company name
    pdf.setFontSize(20);
    pdf.setTextColor(brandingSettings.primaryColor);
    pdf.text(brandingSettings.companyName || 'Company Name', pageWidth / 2, 20, {
      align: 'center',
    });

    // Add report title
    pdf.setFontSize(16);
    pdf.setTextColor(brandingSettings.secondaryColor);
    pdf.text(getReportTitle(), pageWidth / 2, 30, {
      align: 'center',
    });

    // Add watermark if enabled
    if (brandingSettings.includeWatermark) {
      pdf.setTextColor(200, 200, 200);
      pdf.setFontSize(60);
      pdf.text(brandingSettings.companyName || 'CONFIDENTIAL', pageWidth / 2, pageHeight / 2, {
        angle: 45,
        align: 'center',
      });
    }

    // Reset text color
    pdf.setTextColor(0, 0, 0);
  };

  const addReportContent = async (pdf: jsPDF) => {
    pdf.setFontSize(12);
    let yPosition = 50;
    const lineHeight = 7;
    // const pageHeight = pdf.internal.pageSize.getHeight(); // Reserved for future use
    const margin = 20;

    // Add report metadata
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Report Details', margin, yPosition);
    yPosition += lineHeight;

    pdf.setFont('helvetica', 'normal');
    pdf.text(`Report ID: ${reportId}`, margin, yPosition);
    yPosition += lineHeight;
    pdf.text(`Type: ${reportType.toUpperCase()}`, margin, yPosition);
    yPosition += lineHeight;

    if (brandingSettings.includeGeneratedDate) {
      pdf.text(`Generated: ${new Date().toLocaleDateString()}`, margin, yPosition);
      yPosition += lineHeight;
    }

    yPosition += lineHeight * 2;

    // Add report-specific content
    switch (reportType) {
      case 'itp':
        addITPContent(pdf, yPosition);
        break;
      case 'ncr':
        addNCRContent(pdf, yPosition);
        break;
      case 'inspection':
        addInspectionContent(pdf, yPosition);
        break;
      case 'daily_diary':
        addDailyDiaryContent(pdf, yPosition);
        break;
      case 'project_summary':
        addProjectSummaryContent(pdf, yPosition);
        break;
    }
  };

  const addITPContent = (pdf: jsPDF, startY: number) => {
    let yPosition = startY;
    const margin = 20;
    const lineHeight = 7;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('ITP Inspection Report', margin, yPosition);
    yPosition += lineHeight * 2;

    pdf.setFont('helvetica', 'normal');

    // Add ITP details
    if (reportData.name) {
      pdf.text(`Name: ${reportData.name}`, margin, yPosition);
      yPosition += lineHeight;
    }

    if (reportData.status) {
      pdf.text(`Status: ${reportData.status}`, margin, yPosition);
      yPosition += lineHeight;
    }

    if (reportData.completion_percentage !== undefined) {
      pdf.text(`Completion: ${reportData.completion_percentage}%`, margin, yPosition);
      yPosition += lineHeight;
    }

    // Add inspection items
    if (reportData.items && reportData.items.length > 0) {
      yPosition += lineHeight;
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Inspection Items:', margin, yPosition);
      yPosition += lineHeight;

      pdf.setFont('helvetica', 'normal');
      reportData.items.forEach((item: any, index: number) => {
        if (yPosition > pdf.internal.pageSize.getHeight() - 30) {
          pdf.addPage();
          yPosition = 20;
        }

        pdf.text(
          `${index + 1}. ${item.title} - ${item.status?.toUpperCase() || 'PENDING'}`,
          margin + 5,
          yPosition
        );
        yPosition += lineHeight;
      });
    }
  };

  const addNCRContent = (pdf: jsPDF, startY: number) => {
    let yPosition = startY;
    const margin = 20;
    const lineHeight = 7;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Non-Conformance Report', margin, yPosition);
    yPosition += lineHeight * 2;

    pdf.setFont('helvetica', 'normal');

    // Add NCR details
    if (reportData.title) {
      pdf.text(`Title: ${reportData.title}`, margin, yPosition);
      yPosition += lineHeight;
    }

    if (reportData.severity) {
      pdf.text(`Severity: ${reportData.severity.toUpperCase()}`, margin, yPosition);
      yPosition += lineHeight;
    }

    if (reportData.status) {
      pdf.text(`Status: ${reportData.status}`, margin, yPosition);
      yPosition += lineHeight;
    }

    if (reportData.description) {
      yPosition += lineHeight;
      pdf.text('Description:', margin, yPosition);
      yPosition += lineHeight;

      // Wrap long text
      const lines = pdf.splitTextToSize(reportData.description, 170);
      lines.forEach((line: string) => {
        if (yPosition > pdf.internal.pageSize.getHeight() - 30) {
          pdf.addPage();
          yPosition = 20;
        }
        pdf.text(line, margin, yPosition);
        yPosition += lineHeight;
      });
    }
  };

  const addInspectionContent = (pdf: jsPDF, startY: number) => {
    // Similar implementation for inspection reports
    pdf.text('Inspection content here', 20, startY);
  };

  const addDailyDiaryContent = (pdf: jsPDF, startY: number) => {
    // Similar implementation for daily diary reports
    pdf.text('Daily diary content here', 20, startY);
  };

  const addProjectSummaryContent = (pdf: jsPDF, startY: number) => {
    // Similar implementation for project summary reports
    pdf.text('Project summary content here', 20, startY);
  };

  const addFooter = (pdf: jsPDF) => {
    const pageCount = pdf.getNumberOfPages();

    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      const pageHeight = pdf.internal.pageSize.getHeight();
      const pageWidth = pdf.internal.pageSize.getWidth();

      pdf.setFontSize(10);
      pdf.setTextColor(brandingSettings.secondaryColor);

      // Add footer text
      pdf.text(brandingSettings.footerText, pageWidth / 2, pageHeight - 10, { align: 'center' });

      // Add page numbers if enabled
      if (brandingSettings.includePageNumbers) {
        pdf.text(`Page ${i} of ${pageCount}`, pageWidth - 20, pageHeight - 10, { align: 'right' });
      }
    }
  };

  const getReportTitle = () => {
    switch (reportType) {
      case 'itp':
        return 'ITP Inspection Report';
      case 'ncr':
        return 'Non-Conformance Report';
      case 'inspection':
        return 'Inspection Report';
      case 'daily_diary':
        return 'Daily Diary Report';
      case 'project_summary':
        return 'Project Summary Report';
      default:
        return 'Report';
    }
  };

  return (
    <div className="space-y-4">
      {/* Export Controls */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold">Export Report</h3>
        <div className="flex gap-2">
          <Button
            variant="secondary"
            size="sm"
            onClick={() => setShowBrandingSettings(!showBrandingSettings)}
          >
            <Settings className="w-4 h-4 mr-2" />
            Branding
          </Button>

          <Button onClick={generateBrandedPDF} disabled={isGenerating}>
            {isGenerating ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <Download className="w-4 h-4 mr-2" />
                Export PDF
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Branding Settings */}
      {showBrandingSettings && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 space-y-4">
          <h4 className="font-semibold mb-4">Branding Settings</h4>

          {/* Company Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Company Name</label>
            <input
              type="text"
              value={brandingSettings.companyName}
              onChange={(e) =>
                setBrandingSettings((prev) => ({
                  ...prev,
                  companyName: e.target.value,
                }))
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Your Company Name"
            />
          </div>

          {/* Logo Upload */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Company Logo</label>
            <div className="flex items-center gap-3">
              {brandingSettings.logoUrl ? (
                <div className="relative h-12 w-24">
                  <Image
                    src={brandingSettings.logoUrl}
                    alt="Company Logo"
                    fill
                    sizes="96px"
                    className="object-contain"
                  />
                </div>
              ) : (
                <div className="h-12 w-12 bg-gray-100 rounded flex items-center justify-center">
                  <ImageIcon className="w-6 h-6 text-gray-400" />
                </div>
              )}
              <label className="cursor-pointer">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleLogoUpload}
                  className="hidden"
                />
                <span className="inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  <Upload className="w-4 h-4 mr-2" />
                  Upload Logo
                </span>
              </label>
            </div>
          </div>

          {/* Colors */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Primary Color</label>
              <div className="flex gap-2">
                <input
                  type="color"
                  value={brandingSettings.primaryColor}
                  onChange={(e) =>
                    setBrandingSettings((prev) => ({
                      ...prev,
                      primaryColor: e.target.value,
                    }))
                  }
                  className="h-10 w-16"
                />
                <input
                  type="text"
                  value={brandingSettings.primaryColor}
                  onChange={(e) =>
                    setBrandingSettings((prev) => ({
                      ...prev,
                      primaryColor: e.target.value,
                    }))
                  }
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Secondary Color
              </label>
              <div className="flex gap-2">
                <input
                  type="color"
                  value={brandingSettings.secondaryColor}
                  onChange={(e) =>
                    setBrandingSettings((prev) => ({
                      ...prev,
                      secondaryColor: e.target.value,
                    }))
                  }
                  className="h-10 w-16"
                />
                <input
                  type="text"
                  value={brandingSettings.secondaryColor}
                  onChange={(e) =>
                    setBrandingSettings((prev) => ({
                      ...prev,
                      secondaryColor: e.target.value,
                    }))
                  }
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg"
                />
              </div>
            </div>
          </div>

          {/* Footer Text */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Footer Text</label>
            <input
              type="text"
              value={brandingSettings.footerText}
              onChange={(e) =>
                setBrandingSettings((prev) => ({
                  ...prev,
                  footerText: e.target.value,
                }))
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-lg"
              placeholder="e.g., Confidential - Property of Your Company"
            />
          </div>

          {/* Options */}
          <div className="space-y-2">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={brandingSettings.includeWatermark}
                onChange={(e) =>
                  setBrandingSettings((prev) => ({
                    ...prev,
                    includeWatermark: e.target.checked,
                  }))
                }
                className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500 mr-2"
              />
              <span className="text-sm">Include watermark</span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={brandingSettings.includePageNumbers}
                onChange={(e) =>
                  setBrandingSettings((prev) => ({
                    ...prev,
                    includePageNumbers: e.target.checked,
                  }))
                }
                className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500 mr-2"
              />
              <span className="text-sm">Include page numbers</span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={brandingSettings.includeGeneratedDate}
                onChange={(e) =>
                  setBrandingSettings((prev) => ({
                    ...prev,
                    includeGeneratedDate: e.target.checked,
                  }))
                }
                className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500 mr-2"
              />
              <span className="text-sm">Include generation date</span>
            </label>
          </div>

          {/* Save Button */}
          <div className="flex justify-end pt-4 border-t">
            <Button onClick={saveBrandingSettings}>Save Branding Settings</Button>
          </div>
        </div>
      )}
    </div>
  );
}
