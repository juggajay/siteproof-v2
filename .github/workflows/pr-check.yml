name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Check for changes
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      database: ${{ steps.filter.outputs.database }}
      packages: ${{ steps.filter.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'packages/ui/**'
              - 'packages/shared/**'
            database:
              - 'packages/database/**'
            packages:
              - 'packages/**'

  # Size check
  size:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build and analyze bundle
        run: |
          pnpm --filter web build
          pnpm --filter web analyze
      
      - name: Upload bundle stats
        uses: actions/upload-artifact@v3
        with:
          name: bundle-stats
          path: apps/web/.next/analyze

  # Lighthouse CI
  lighthouse:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build application
        run: pnpm --filter web build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Database schema check
  schema-check:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.database == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Validate migrations
        run: |
          supabase db lint --schema packages/database/migrations
      
      - name: Check for migration conflicts
        run: |
          # Check if migrations are sequential
          ls packages/database/migrations/*.sql | sort -V | awk -F'[/_.]' '{print $(NF-2)}' | awk 'NR>1 && $1 != prev+1 {print "Gap in migration sequence between", prev, "and", $1; exit 1} {prev=$1}'

  # Dependency check
  deps:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Check for outdated dependencies
        run: pnpm outdated --format json > outdated.json || true
      
      - name: Comment PR with outdated deps
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            
            if (Object.keys(outdated).length === 0) return;
            
            let comment = '## ðŸ“¦ Outdated Dependencies\n\n';
            comment += '| Package | Current | Wanted | Latest |\n';
            comment += '|---------|---------|--------|--------|\n';
            
            for (const [pkg, info] of Object.entries(outdated)) {
              comment += `| ${pkg} | ${info.current} | ${info.wanted} | ${info.latest} |\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });